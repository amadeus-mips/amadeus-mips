;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Top : 
  module Controller : 
    input clock : Clock
    input reset : Reset
    output io : {input : {flip instr : UInt<32>, flip alu_branch_take : UInt<1>}, output : {PC_isBranch : UInt<1>, PC_isJump : UInt<1>, DstRegSelect : UInt<1>, WBEnable : UInt<1>, OpBSelect : UInt<1>, AluOp : UInt<4>, MemWriteEnable : UInt<1>, MemReadEnable : UInt<1>, WBSelect : UInt<1>}}
    
    io.output.WBSelect is invalid @[Controller.scala 46:8]
    io.output.MemReadEnable is invalid @[Controller.scala 46:8]
    io.output.MemWriteEnable is invalid @[Controller.scala 46:8]
    io.output.AluOp is invalid @[Controller.scala 46:8]
    io.output.OpBSelect is invalid @[Controller.scala 46:8]
    io.output.WBEnable is invalid @[Controller.scala 46:8]
    io.output.DstRegSelect is invalid @[Controller.scala 46:8]
    io.output.PC_isJump is invalid @[Controller.scala 46:8]
    io.output.PC_isBranch is invalid @[Controller.scala 46:8]
    io.input.alu_branch_take is invalid @[Controller.scala 46:8]
    io.input.instr is invalid @[Controller.scala 46:8]
    node _T = and(io.input.instr, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<1>("h00"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.input.instr, UInt<32>("h0fc0007ff")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<6>("h020"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.input.instr, UInt<32>("h0fc0007ff")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<6>("h022"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.input.instr, UInt<32>("h0fc0007ff")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<6>("h024"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.input.instr, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<30>("h020000000"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.input.instr, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<29>("h010000000"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.input.instr, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<28>("h08000000"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.input.instr, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<32>("h08c000000"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.input.instr, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<32>("h0ac000000"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_19 = mux(_T_15, UInt<1>("h00"), _T_18) @[Lookup.scala 33:37]
    node _T_20 = mux(_T_13, UInt<1>("h00"), _T_19) @[Lookup.scala 33:37]
    node _T_21 = mux(_T_11, UInt<1>("h01"), _T_20) @[Lookup.scala 33:37]
    node _T_22 = mux(_T_9, UInt<1>("h00"), _T_21) @[Lookup.scala 33:37]
    node _T_23 = mux(_T_7, UInt<1>("h00"), _T_22) @[Lookup.scala 33:37]
    node _T_24 = mux(_T_5, UInt<1>("h00"), _T_23) @[Lookup.scala 33:37]
    node _T_25 = mux(_T_3, UInt<1>("h00"), _T_24) @[Lookup.scala 33:37]
    node controlSignals_0 = mux(_T_1, UInt<1>("h00"), _T_25) @[Lookup.scala 33:37]
    node _T_26 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_27 = mux(_T_15, UInt<1>("h00"), _T_26) @[Lookup.scala 33:37]
    node _T_28 = mux(_T_13, UInt<1>("h01"), _T_27) @[Lookup.scala 33:37]
    node _T_29 = mux(_T_11, UInt<1>("h00"), _T_28) @[Lookup.scala 33:37]
    node _T_30 = mux(_T_9, UInt<1>("h00"), _T_29) @[Lookup.scala 33:37]
    node _T_31 = mux(_T_7, UInt<1>("h00"), _T_30) @[Lookup.scala 33:37]
    node _T_32 = mux(_T_5, UInt<1>("h00"), _T_31) @[Lookup.scala 33:37]
    node _T_33 = mux(_T_3, UInt<1>("h00"), _T_32) @[Lookup.scala 33:37]
    node controlSignals_1 = mux(_T_1, UInt<1>("h00"), _T_33) @[Lookup.scala 33:37]
    node _T_34 = mux(_T_17, UInt<1>("h01"), UInt<1>("h01")) @[Lookup.scala 33:37]
    node _T_35 = mux(_T_15, UInt<1>("h00"), _T_34) @[Lookup.scala 33:37]
    node _T_36 = mux(_T_13, UInt<1>("h01"), _T_35) @[Lookup.scala 33:37]
    node _T_37 = mux(_T_11, UInt<1>("h01"), _T_36) @[Lookup.scala 33:37]
    node _T_38 = mux(_T_9, UInt<1>("h00"), _T_37) @[Lookup.scala 33:37]
    node _T_39 = mux(_T_7, UInt<1>("h01"), _T_38) @[Lookup.scala 33:37]
    node _T_40 = mux(_T_5, UInt<1>("h01"), _T_39) @[Lookup.scala 33:37]
    node _T_41 = mux(_T_3, UInt<1>("h01"), _T_40) @[Lookup.scala 33:37]
    node controlSignals_2 = mux(_T_1, UInt<1>("h01"), _T_41) @[Lookup.scala 33:37]
    node _T_42 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_43 = mux(_T_15, UInt<1>("h01"), _T_42) @[Lookup.scala 33:37]
    node _T_44 = mux(_T_13, UInt<1>("h00"), _T_43) @[Lookup.scala 33:37]
    node _T_45 = mux(_T_11, UInt<1>("h00"), _T_44) @[Lookup.scala 33:37]
    node _T_46 = mux(_T_9, UInt<1>("h01"), _T_45) @[Lookup.scala 33:37]
    node _T_47 = mux(_T_7, UInt<1>("h01"), _T_46) @[Lookup.scala 33:37]
    node _T_48 = mux(_T_5, UInt<1>("h01"), _T_47) @[Lookup.scala 33:37]
    node _T_49 = mux(_T_3, UInt<1>("h01"), _T_48) @[Lookup.scala 33:37]
    node controlSignals_3 = mux(_T_1, UInt<1>("h00"), _T_49) @[Lookup.scala 33:37]
    node _T_50 = mux(_T_17, UInt<1>("h01"), UInt<1>("h01")) @[Lookup.scala 33:37]
    node _T_51 = mux(_T_15, UInt<1>("h00"), _T_50) @[Lookup.scala 33:37]
    node _T_52 = mux(_T_13, UInt<1>("h01"), _T_51) @[Lookup.scala 33:37]
    node _T_53 = mux(_T_11, UInt<1>("h01"), _T_52) @[Lookup.scala 33:37]
    node _T_54 = mux(_T_9, UInt<1>("h00"), _T_53) @[Lookup.scala 33:37]
    node _T_55 = mux(_T_7, UInt<1>("h01"), _T_54) @[Lookup.scala 33:37]
    node _T_56 = mux(_T_5, UInt<1>("h01"), _T_55) @[Lookup.scala 33:37]
    node _T_57 = mux(_T_3, UInt<1>("h01"), _T_56) @[Lookup.scala 33:37]
    node controlSignals_4 = mux(_T_1, UInt<1>("h01"), _T_57) @[Lookup.scala 33:37]
    node _T_58 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_59 = mux(_T_15, UInt<1>("h01"), _T_58) @[Lookup.scala 33:37]
    node _T_60 = mux(_T_13, UInt<1>("h00"), _T_59) @[Lookup.scala 33:37]
    node _T_61 = mux(_T_11, UInt<3>("h04"), _T_60) @[Lookup.scala 33:37]
    node _T_62 = mux(_T_9, UInt<1>("h01"), _T_61) @[Lookup.scala 33:37]
    node _T_63 = mux(_T_7, UInt<2>("h03"), _T_62) @[Lookup.scala 33:37]
    node _T_64 = mux(_T_5, UInt<2>("h02"), _T_63) @[Lookup.scala 33:37]
    node _T_65 = mux(_T_3, UInt<1>("h01"), _T_64) @[Lookup.scala 33:37]
    node controlSignals_5 = mux(_T_1, UInt<1>("h00"), _T_65) @[Lookup.scala 33:37]
    node _T_66 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_67 = mux(_T_15, UInt<1>("h00"), _T_66) @[Lookup.scala 33:37]
    node _T_68 = mux(_T_13, UInt<1>("h00"), _T_67) @[Lookup.scala 33:37]
    node _T_69 = mux(_T_11, UInt<1>("h00"), _T_68) @[Lookup.scala 33:37]
    node _T_70 = mux(_T_9, UInt<1>("h00"), _T_69) @[Lookup.scala 33:37]
    node _T_71 = mux(_T_7, UInt<1>("h00"), _T_70) @[Lookup.scala 33:37]
    node _T_72 = mux(_T_5, UInt<1>("h00"), _T_71) @[Lookup.scala 33:37]
    node _T_73 = mux(_T_3, UInt<1>("h00"), _T_72) @[Lookup.scala 33:37]
    node controlSignals_6 = mux(_T_1, UInt<1>("h00"), _T_73) @[Lookup.scala 33:37]
    node _T_74 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_75 = mux(_T_15, UInt<1>("h01"), _T_74) @[Lookup.scala 33:37]
    node _T_76 = mux(_T_13, UInt<1>("h00"), _T_75) @[Lookup.scala 33:37]
    node _T_77 = mux(_T_11, UInt<1>("h00"), _T_76) @[Lookup.scala 33:37]
    node _T_78 = mux(_T_9, UInt<1>("h00"), _T_77) @[Lookup.scala 33:37]
    node _T_79 = mux(_T_7, UInt<1>("h00"), _T_78) @[Lookup.scala 33:37]
    node _T_80 = mux(_T_5, UInt<1>("h00"), _T_79) @[Lookup.scala 33:37]
    node _T_81 = mux(_T_3, UInt<1>("h00"), _T_80) @[Lookup.scala 33:37]
    node controlSignals_7 = mux(_T_1, UInt<1>("h00"), _T_81) @[Lookup.scala 33:37]
    node _T_82 = mux(_T_17, UInt<1>("h01"), UInt<1>("h01")) @[Lookup.scala 33:37]
    node _T_83 = mux(_T_15, UInt<1>("h00"), _T_82) @[Lookup.scala 33:37]
    node _T_84 = mux(_T_13, UInt<1>("h01"), _T_83) @[Lookup.scala 33:37]
    node _T_85 = mux(_T_11, UInt<1>("h01"), _T_84) @[Lookup.scala 33:37]
    node _T_86 = mux(_T_9, UInt<1>("h01"), _T_85) @[Lookup.scala 33:37]
    node _T_87 = mux(_T_7, UInt<1>("h01"), _T_86) @[Lookup.scala 33:37]
    node _T_88 = mux(_T_5, UInt<1>("h01"), _T_87) @[Lookup.scala 33:37]
    node _T_89 = mux(_T_3, UInt<1>("h01"), _T_88) @[Lookup.scala 33:37]
    node controlSignals_8 = mux(_T_1, UInt<1>("h01"), _T_89) @[Lookup.scala 33:37]
    node _T_90 = and(controlSignals_0, io.input.alu_branch_take) @[Controller.scala 73:51]
    node control_PC_isBranch = mux(_T_90, UInt<1>("h01"), UInt<1>("h00")) @[Controller.scala 73:34]
    io.output.PC_isJump <= controlSignals_1 @[Controller.scala 75:25]
    io.output.PC_isBranch <= control_PC_isBranch @[Controller.scala 76:27]
    io.output.DstRegSelect <= controlSignals_2 @[Controller.scala 77:28]
    io.output.WBEnable <= controlSignals_3 @[Controller.scala 78:24]
    io.output.OpBSelect <= controlSignals_4 @[Controller.scala 79:25]
    io.output.AluOp <= controlSignals_5 @[Controller.scala 80:21]
    io.output.MemWriteEnable <= controlSignals_6 @[Controller.scala 81:30]
    io.output.MemReadEnable <= controlSignals_7 @[Controller.scala 82:29]
    io.output.WBSelect <= controlSignals_8 @[Controller.scala 83:24]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1Addr : UInt<5>, rs1Data : UInt<32>, flip rs2Addr : UInt<5>, rs2Data : UInt<32>, flip writeAddr : UInt<5>, flip writeData : UInt<32>, flip writeEnable : UInt<1>}
    
    reg regs : UInt<32>[32], clock @[RegisterFile.scala 29:17]
    when io.writeEnable : @[RegisterFile.scala 32:25]
      regs[io.writeAddr] <= io.writeData @[RegisterFile.scala 33:24]
      skip @[RegisterFile.scala 32:25]
    io.rs1Data <= regs[io.rs1Addr] @[RegisterFile.scala 38:14]
    io.rs2Data <= regs[io.rs2Addr] @[RegisterFile.scala 39:14]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {input : {flip inputA : UInt<32>, flip inputB : UInt<32>, flip controlSignal : UInt<4>}, output : {aluOutput : UInt<32>, branchTake : UInt<1>}}
    
    node _T = add(io.input.inputA, io.input.inputB) @[ALU.scala 40:31]
    node _T_1 = tail(_T, 1) @[ALU.scala 40:31]
    node _T_2 = sub(io.input.inputA, io.input.inputB) @[ALU.scala 41:31]
    node _T_3 = tail(_T_2, 1) @[ALU.scala 41:31]
    node _T_4 = and(io.input.inputA, io.input.inputB) @[ALU.scala 42:31]
    node _T_5 = eq(UInt<4>("h09"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_7 : UInt<32> @[Mux.scala 68:16]
    _T_7 is invalid @[Mux.scala 68:16]
    node _T_6 = mux(_T_5, _T_7, io.input.inputA) @[Mux.scala 68:16]
    node _T_8 = eq(UInt<4>("h08"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_10 : UInt<32> @[Mux.scala 68:16]
    _T_10 is invalid @[Mux.scala 68:16]
    node _T_9 = mux(_T_8, _T_10, _T_6) @[Mux.scala 68:16]
    node _T_11 = eq(UInt<4>("h07"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_13 : UInt<32> @[Mux.scala 68:16]
    _T_13 is invalid @[Mux.scala 68:16]
    node _T_12 = mux(_T_11, _T_13, _T_9) @[Mux.scala 68:16]
    node _T_14 = eq(UInt<4>("h06"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_16 : UInt<32> @[Mux.scala 68:16]
    _T_16 is invalid @[Mux.scala 68:16]
    node _T_15 = mux(_T_14, _T_16, _T_12) @[Mux.scala 68:16]
    node _T_17 = eq(UInt<4>("h05"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_19 : UInt<32> @[Mux.scala 68:16]
    _T_19 is invalid @[Mux.scala 68:16]
    node _T_18 = mux(_T_17, _T_19, _T_15) @[Mux.scala 68:16]
    node _T_20 = eq(UInt<4>("h04"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_22 : UInt<32> @[Mux.scala 68:16]
    _T_22 is invalid @[Mux.scala 68:16]
    node _T_21 = mux(_T_20, _T_22, _T_18) @[Mux.scala 68:16]
    node _T_23 = eq(UInt<4>("h03"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_24 = mux(_T_23, _T_4, _T_21) @[Mux.scala 68:16]
    node _T_25 = eq(UInt<4>("h02"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_26 = mux(_T_25, _T_3, _T_24) @[Mux.scala 68:16]
    node _T_27 = eq(UInt<4>("h01"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_28 = mux(_T_27, _T_1, _T_26) @[Mux.scala 68:16]
    io.output.aluOutput <= _T_28 @[ALU.scala 39:25]
    node _T_29 = eq(io.input.inputA, io.input.inputB) @[ALU.scala 52:41]
    node _T_30 = eq(io.input.inputA, io.input.inputB) @[ALU.scala 53:43]
    node _T_31 = eq(_T_30, UInt<1>("h00")) @[ALU.scala 53:25]
    node _T_32 = gt(io.input.inputA, UInt<1>("h00")) @[ALU.scala 54:47]
    node _T_33 = geq(io.input.inputA, UInt<1>("h00")) @[ALU.scala 55:52]
    node _T_34 = geq(io.input.inputA, UInt<1>("h00")) @[ALU.scala 56:45]
    node _T_35 = eq(_T_34, UInt<1>("h00")) @[ALU.scala 56:27]
    node _T_36 = gt(io.input.inputA, UInt<1>("h00")) @[ALU.scala 57:50]
    node _T_37 = eq(_T_36, UInt<1>("h00")) @[ALU.scala 57:32]
    node _T_38 = eq(UInt<4>("h09"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_39 = mux(_T_38, _T_37, UInt<1>("h00")) @[Mux.scala 68:16]
    node _T_40 = eq(UInt<4>("h08"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_41 = mux(_T_40, _T_35, _T_39) @[Mux.scala 68:16]
    node _T_42 = eq(UInt<4>("h07"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_43 = mux(_T_42, _T_33, _T_41) @[Mux.scala 68:16]
    node _T_44 = eq(UInt<4>("h06"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_45 = mux(_T_44, _T_32, _T_43) @[Mux.scala 68:16]
    node _T_46 = eq(UInt<4>("h05"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_47 = mux(_T_46, _T_31, _T_45) @[Mux.scala 68:16]
    node _T_48 = eq(UInt<4>("h04"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_49 = mux(_T_48, _T_29, _T_47) @[Mux.scala 68:16]
    io.output.branchTake <= _T_49 @[ALU.scala 51:26]
    
  module SingleCycleCPU : 
    input clock : Clock
    input reset : Reset
    output io : {flip imem : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>}, flip dmem : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, readdata : UInt<32>}}
    
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SingleCycleCPU.scala 12:23]
    inst controller of Controller @[SingleCycleCPU.scala 13:26]
    controller.clock <= clock
    controller.reset <= reset
    inst regFile of RegisterFile @[SingleCycleCPU.scala 14:23]
    regFile.clock <= clock
    regFile.reset <= reset
    inst alu of ALU @[SingleCycleCPU.scala 15:19]
    alu.clock <= clock
    alu.reset <= reset
    io.imem.address <= reg_pc @[SingleCycleCPU.scala 19:19]
    io.imem.valid <= UInt<1>("h01") @[SingleCycleCPU.scala 20:17]
    node rs_address = bits(io.imem.instruction, 25, 21) @[SingleCycleCPU.scala 29:31]
    node rt_address = bits(io.imem.instruction, 20, 16) @[SingleCycleCPU.scala 30:31]
    node rd_address = bits(io.imem.instruction, 15, 11) @[SingleCycleCPU.scala 31:31]
    node immediate = bits(io.imem.instruction, 15, 0) @[SingleCycleCPU.scala 32:30]
    node address = bits(io.imem.instruction, 25, 0) @[SingleCycleCPU.scala 33:28]
    node _T = bits(immediate, 15, 15) @[SingleCycleCPU.scala 34:48]
    node _T_1 = bits(_T, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 71:12]
    node extendedImmediate = cat(_T_2, immediate) @[Cat.scala 29:58]
    controller.io.input.instr <= io.imem.instruction @[SingleCycleCPU.scala 38:29]
    wire pc_plus_four : UInt<32> @[SingleCycleCPU.scala 40:26]
    wire pc_next : UInt<32> @[SingleCycleCPU.scala 41:21]
    wire br_target : UInt<32> @[SingleCycleCPU.scala 42:23]
    wire j_target : UInt<32> @[SingleCycleCPU.scala 43:22]
    node _T_3 = add(reg_pc, UInt<3>("h04")) @[SingleCycleCPU.scala 44:26]
    node _T_4 = tail(_T_3, 1) @[SingleCycleCPU.scala 44:26]
    pc_plus_four <= _T_4 @[SingleCycleCPU.scala 44:16]
    node _T_5 = bits(reg_pc, 31, 28) @[SingleCycleCPU.scala 47:25]
    node _T_6 = mux(UInt<1>("h00"), UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 71:12]
    node _T_7 = cat(_T_5, address) @[Cat.scala 29:58]
    node _T_8 = cat(_T_7, _T_6) @[Cat.scala 29:58]
    j_target <= _T_8 @[SingleCycleCPU.scala 47:12]
    node _T_9 = add(extendedImmediate, pc_plus_four) @[SingleCycleCPU.scala 48:34]
    node _T_10 = tail(_T_9, 1) @[SingleCycleCPU.scala 48:34]
    br_target <= _T_10 @[SingleCycleCPU.scala 48:13]
    node _T_11 = mux(controller.io.output.PC_isJump, j_target, pc_plus_four) @[Mux.scala 87:16]
    node _T_12 = mux(controller.io.output.PC_isBranch, br_target, _T_11) @[Mux.scala 87:16]
    pc_next <= _T_12 @[SingleCycleCPU.scala 49:11]
    wire wb_data : UInt<32> @[SingleCycleCPU.scala 54:21]
    regFile.io.rs1Addr <= rs_address @[SingleCycleCPU.scala 55:22]
    regFile.io.rs2Addr <= rt_address @[SingleCycleCPU.scala 56:22]
    node _T_13 = mux(controller.io.output.DstRegSelect, rt_address, rd_address) @[SingleCycleCPU.scala 57:30]
    regFile.io.writeAddr <= _T_13 @[SingleCycleCPU.scala 57:24]
    regFile.io.writeData <= wb_data @[SingleCycleCPU.scala 58:24]
    regFile.io.writeEnable <= controller.io.output.WBEnable @[SingleCycleCPU.scala 59:26]
    wire valRS : UInt<32> @[SingleCycleCPU.scala 61:19]
    wire valRT : UInt<32> @[SingleCycleCPU.scala 62:19]
    valRS <= regFile.io.rs1Data @[SingleCycleCPU.scala 63:9]
    valRT <= regFile.io.rs2Data @[SingleCycleCPU.scala 64:9]
    alu.io.input.inputA <= valRS @[SingleCycleCPU.scala 67:23]
    node _T_14 = mux(controller.io.output.OpBSelect, valRT, extendedImmediate) @[SingleCycleCPU.scala 69:29]
    alu.io.input.inputB <= _T_14 @[SingleCycleCPU.scala 69:23]
    alu.io.input.controlSignal <= controller.io.output.AluOp @[SingleCycleCPU.scala 70:30]
    wire aluOutput : UInt<32> @[SingleCycleCPU.scala 72:23]
    aluOutput <= alu.io.output.aluOutput @[SingleCycleCPU.scala 73:13]
    controller.io.input.alu_branch_take <= alu.io.output.branchTake @[SingleCycleCPU.scala 74:39]
    io.dmem.address <= aluOutput @[SingleCycleCPU.scala 77:19]
    io.dmem.writedata <= valRT @[SingleCycleCPU.scala 78:21]
    io.dmem.memread <= controller.io.output.MemReadEnable @[SingleCycleCPU.scala 79:19]
    io.dmem.memwrite <= controller.io.output.MemWriteEnable @[SingleCycleCPU.scala 80:20]
    io.dmem.valid <= UInt<1>("h01") @[SingleCycleCPU.scala 82:17]
    wire readData : UInt<32> @[SingleCycleCPU.scala 85:22]
    readData <= io.dmem.readdata @[SingleCycleCPU.scala 86:12]
    node _T_15 = mux(controller.io.output.WBSelect, aluOutput, readData) @[SingleCycleCPU.scala 87:17]
    wb_data <= _T_15 @[SingleCycleCPU.scala 87:11]
    reg_pc <= pc_next @[SingleCycleCPU.scala 89:10]
    
  module DualPortedCombinMemory : 
    input clock : Clock
    input reset : Reset
    output io : {imem : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}, dmem : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    io.imem.request.bits.operation is invalid @[BaseMemComponents.scala 34:19]
    io.imem.request.bits.writedata is invalid @[BaseMemComponents.scala 34:19]
    io.imem.request.bits.address is invalid @[BaseMemComponents.scala 34:19]
    io.imem.request.valid is invalid @[BaseMemComponents.scala 34:19]
    io.imem.request.ready is invalid @[BaseMemComponents.scala 34:19]
    io.dmem.request.bits.operation is invalid @[BaseMemComponents.scala 35:19]
    io.dmem.request.bits.writedata is invalid @[BaseMemComponents.scala 35:19]
    io.dmem.request.bits.address is invalid @[BaseMemComponents.scala 35:19]
    io.dmem.request.valid is invalid @[BaseMemComponents.scala 35:19]
    io.dmem.request.ready is invalid @[BaseMemComponents.scala 35:19]
    wire _T : {valid : UInt<1>, bits : {data : UInt<32>}} @[BaseMemComponents.scala 38:35]
    _T.bits.data <= UInt<32>("h00") @[BaseMemComponents.scala 38:35]
    _T.valid <= UInt<1>("h00") @[BaseMemComponents.scala 38:35]
    io.imem.response.bits.data <= _T.bits.data @[BaseMemComponents.scala 38:20]
    io.imem.response.valid <= _T.valid @[BaseMemComponents.scala 38:20]
    wire _T_1 : {valid : UInt<1>, bits : {data : UInt<32>}} @[BaseMemComponents.scala 39:35]
    _T_1.bits.data <= UInt<32>("h00") @[BaseMemComponents.scala 39:35]
    _T_1.valid <= UInt<1>("h00") @[BaseMemComponents.scala 39:35]
    io.dmem.response.bits.data <= _T_1.bits.data @[BaseMemComponents.scala 39:20]
    io.dmem.response.valid <= _T_1.valid @[BaseMemComponents.scala 39:20]
    cmem memory : UInt<32>[16384] @[BaseMemComponents.scala 41:19]
    io.imem.response.valid <= UInt<1>("h00") @[Memory.scala 15:27]
    io.imem.request.ready <= UInt<1>("h01") @[Memory.scala 17:26]
    when io.imem.request.valid : @[Memory.scala 23:32]
      node _T_2 = eq(io.imem.request.bits.operation, UInt<1>("h00")) @[Memory.scala 28:30]
      node _T_3 = asUInt(reset) @[Memory.scala 28:11]
      node _T_4 = or(_T_2, _T_3) @[Memory.scala 28:11]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[Memory.scala 28:11]
      when _T_5 : @[Memory.scala 28:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at Memory.scala:28 assert(request.operation === Read)\n") @[Memory.scala 28:11]
        stop(clock, UInt<1>(1), 1) @[Memory.scala 28:11]
        skip @[Memory.scala 28:11]
      node _T_6 = lt(io.imem.request.bits.address, UInt<17>("h010000")) @[Memory.scala 33:27]
      when _T_6 : @[Memory.scala 33:37]
        io.imem.response.valid <= UInt<1>("h01") @[Memory.scala 34:30]
        node _T_7 = shr(io.imem.request.bits.address, 2) @[Memory.scala 35:60]
        node _T_8 = bits(_T_7, 13, 0) @[Memory.scala 35:43]
        infer mport _T_9 = memory[_T_8], clock @[Memory.scala 35:43]
        io.imem.response.bits.data <= _T_9 @[Memory.scala 35:34]
        skip @[Memory.scala 33:37]
      else : @[Memory.scala 36:18]
        io.imem.response.valid <= UInt<1>("h00") @[Memory.scala 37:30]
        skip @[Memory.scala 36:18]
      skip @[Memory.scala 23:32]
    else : @[Memory.scala 39:16]
      io.imem.response.valid <= UInt<1>("h00") @[Memory.scala 40:28]
      skip @[Memory.scala 39:16]
    io.dmem.response.valid <= UInt<1>("h00") @[Memory.scala 15:27]
    io.dmem.request.ready <= UInt<1>("h01") @[Memory.scala 17:26]
    when io.dmem.request.valid : @[Memory.scala 50:32]
      node _T_10 = neq(io.dmem.request.bits.operation, UInt<1>("h01")) @[Memory.scala 54:31]
      node _T_11 = asUInt(reset) @[Memory.scala 54:12]
      node _T_12 = or(_T_10, _T_11) @[Memory.scala 54:12]
      node _T_13 = eq(_T_12, UInt<1>("h00")) @[Memory.scala 54:12]
      when _T_13 : @[Memory.scala 54:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at Memory.scala:54 assert (request.operation =/= Write)\n") @[Memory.scala 54:12]
        stop(clock, UInt<1>(1), 1) @[Memory.scala 54:12]
        skip @[Memory.scala 54:12]
      node _T_14 = lt(io.dmem.request.bits.address, UInt<17>("h010000")) @[Memory.scala 56:29]
      node _T_15 = asUInt(reset) @[Memory.scala 56:12]
      node _T_16 = or(_T_14, _T_15) @[Memory.scala 56:12]
      node _T_17 = eq(_T_16, UInt<1>("h00")) @[Memory.scala 56:12]
      when _T_17 : @[Memory.scala 56:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at Memory.scala:56 assert (request.address < size.U)\n") @[Memory.scala 56:12]
        stop(clock, UInt<1>(1), 1) @[Memory.scala 56:12]
        skip @[Memory.scala 56:12]
      node _T_18 = shr(io.dmem.request.bits.address, 2) @[Memory.scala 59:58]
      node _T_19 = bits(_T_18, 13, 0) @[Memory.scala 59:46]
      read mport _T_20 = memory[_T_19], clock @[Memory.scala 59:46]
      io.dmem.response.bits.data <= _T_20 @[Memory.scala 59:32]
      io.dmem.response.valid <= UInt<1>("h01") @[Memory.scala 60:28]
      node _T_21 = eq(io.dmem.request.bits.operation, UInt<2>("h02")) @[Memory.scala 63:29]
      when _T_21 : @[Memory.scala 63:44]
        node _T_22 = shr(io.dmem.request.bits.address, 2) @[Memory.scala 64:25]
        node _T_23 = bits(_T_22, 13, 0) @[Memory.scala 64:13]
        infer mport _T_24 = memory[_T_23], clock @[Memory.scala 64:13]
        _T_24 <= io.dmem.request.bits.writedata @[Memory.scala 64:31]
        skip @[Memory.scala 63:44]
      skip @[Memory.scala 50:32]
    else : @[Memory.scala 66:16]
      io.dmem.response.valid <= UInt<1>("h00") @[Memory.scala 67:28]
      skip @[Memory.scala 66:16]
    
  module ICombinMemPort : 
    input clock : Clock
    input reset : Reset
    output io : {pipeline : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>}, flip bus : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    wire _T : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>} @[BaseMemComponents.scala 54:31]
    _T.instruction <= UInt<32>("h00") @[BaseMemComponents.scala 54:31]
    _T.good <= UInt<1>("h00") @[BaseMemComponents.scala 54:31]
    _T.valid <= UInt<1>("h00") @[BaseMemComponents.scala 54:31]
    _T.address <= UInt<32>("h00") @[BaseMemComponents.scala 54:31]
    io.pipeline.instruction <= _T.instruction @[BaseMemComponents.scala 54:15]
    io.pipeline.good <= _T.good @[BaseMemComponents.scala 54:15]
    _T.valid <= io.pipeline.valid @[BaseMemComponents.scala 54:15]
    _T.address <= io.pipeline.address @[BaseMemComponents.scala 54:15]
    io.bus.response.bits.data is invalid @[BaseMemComponents.scala 59:15]
    io.bus.response.valid is invalid @[BaseMemComponents.scala 59:15]
    io.bus.request.bits.operation is invalid @[BaseMemComponents.scala 59:15]
    io.bus.request.bits.writedata is invalid @[BaseMemComponents.scala 59:15]
    io.bus.request.bits.address is invalid @[BaseMemComponents.scala 59:15]
    io.bus.request.valid is invalid @[BaseMemComponents.scala 59:15]
    io.bus.request.ready is invalid @[BaseMemComponents.scala 59:15]
    when io.pipeline.valid : @[MemCombinPort.scala 17:28]
      wire _T_1 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>} @[MemCombinPort.scala 18:23]
      _T_1.address <= io.pipeline.address @[MemCombinPort.scala 19:23]
      _T_1.operation <= UInt<1>("h00") @[MemCombinPort.scala 20:23]
      _T_1.writedata <= UInt<1>("h00") @[MemCombinPort.scala 21:23]
      io.bus.request.bits.operation <= _T_1.operation @[MemCombinPort.scala 23:26]
      io.bus.request.bits.writedata <= _T_1.writedata @[MemCombinPort.scala 23:26]
      io.bus.request.bits.address <= _T_1.address @[MemCombinPort.scala 23:26]
      io.bus.request.valid <= UInt<1>("h01") @[MemCombinPort.scala 24:26]
      skip @[MemCombinPort.scala 17:28]
    else : @[MemCombinPort.scala 25:16]
      io.bus.request.valid <= UInt<1>("h00") @[MemCombinPort.scala 26:26]
      skip @[MemCombinPort.scala 25:16]
    io.pipeline.good <= UInt<1>("h01") @[MemCombinPort.scala 30:20]
    io.pipeline.instruction <= io.bus.response.bits.data @[MemCombinPort.scala 31:27]
    
  module DCombinMemPort : 
    input clock : Clock
    input reset : Reset
    output io : {pipeline : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, readdata : UInt<32>}, flip bus : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    wire _T : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, readdata : UInt<32>} @[BaseMemComponents.scala 71:31]
    _T.readdata <= UInt<32>("h00") @[BaseMemComponents.scala 71:31]
    _T.memwrite <= UInt<1>("h00") @[BaseMemComponents.scala 71:31]
    _T.memread <= UInt<1>("h00") @[BaseMemComponents.scala 71:31]
    _T.writedata <= UInt<32>("h00") @[BaseMemComponents.scala 71:31]
    _T.good <= UInt<1>("h00") @[BaseMemComponents.scala 71:31]
    _T.valid <= UInt<1>("h00") @[BaseMemComponents.scala 71:31]
    _T.address <= UInt<32>("h00") @[BaseMemComponents.scala 71:31]
    io.pipeline.readdata <= _T.readdata @[BaseMemComponents.scala 71:15]
    _T.memwrite <= io.pipeline.memwrite @[BaseMemComponents.scala 71:15]
    _T.memread <= io.pipeline.memread @[BaseMemComponents.scala 71:15]
    _T.writedata <= io.pipeline.writedata @[BaseMemComponents.scala 71:15]
    io.pipeline.good <= _T.good @[BaseMemComponents.scala 71:15]
    _T.valid <= io.pipeline.valid @[BaseMemComponents.scala 71:15]
    _T.address <= io.pipeline.address @[BaseMemComponents.scala 71:15]
    io.bus.response.bits.data is invalid @[BaseMemComponents.scala 76:15]
    io.bus.response.valid is invalid @[BaseMemComponents.scala 76:15]
    io.bus.request.bits.operation is invalid @[BaseMemComponents.scala 76:15]
    io.bus.request.bits.writedata is invalid @[BaseMemComponents.scala 76:15]
    io.bus.request.bits.address is invalid @[BaseMemComponents.scala 76:15]
    io.bus.request.valid is invalid @[BaseMemComponents.scala 76:15]
    io.bus.request.ready is invalid @[BaseMemComponents.scala 76:15]
    io.pipeline.good <= io.bus.response.valid @[BaseMemComponents.scala 78:20]
    io.pipeline.good <= UInt<1>("h01") @[MemCombinPort.scala 40:20]
    node _T_1 = or(io.pipeline.memread, io.pipeline.memwrite) @[MemCombinPort.scala 42:51]
    node _T_2 = and(io.pipeline.valid, _T_1) @[MemCombinPort.scala 42:27]
    when _T_2 : @[MemCombinPort.scala 42:77]
      node _T_3 = and(io.pipeline.memread, io.pipeline.memwrite) @[MemCombinPort.scala 44:34]
      node _T_4 = eq(_T_3, UInt<1>("h00")) @[MemCombinPort.scala 44:12]
      node _T_5 = asUInt(reset) @[MemCombinPort.scala 44:11]
      node _T_6 = or(_T_4, _T_5) @[MemCombinPort.scala 44:11]
      node _T_7 = eq(_T_6, UInt<1>("h00")) @[MemCombinPort.scala 44:11]
      when _T_7 : @[MemCombinPort.scala 44:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at MemCombinPort.scala:44 assert(!(io.pipeline.memread && io.pipeline.memwrite))\n") @[MemCombinPort.scala 44:11]
        stop(clock, UInt<1>(1), 1) @[MemCombinPort.scala 44:11]
        skip @[MemCombinPort.scala 44:11]
      io.bus.request.bits.address <= io.pipeline.address @[MemCombinPort.scala 46:33]
      io.bus.request.valid <= UInt<1>("h01") @[MemCombinPort.scala 47:26]
      when io.pipeline.memwrite : @[MemCombinPort.scala 49:33]
        io.bus.request.bits.operation <= UInt<2>("h02") @[MemCombinPort.scala 58:37]
        skip @[MemCombinPort.scala 49:33]
      else : @[MemCombinPort.scala 59:18]
        io.bus.request.bits.operation <= UInt<1>("h00") @[MemCombinPort.scala 61:37]
        skip @[MemCombinPort.scala 59:18]
      skip @[MemCombinPort.scala 42:77]
    else : @[MemCombinPort.scala 63:16]
      io.bus.request.valid <= UInt<1>("h00") @[MemCombinPort.scala 65:26]
      skip @[MemCombinPort.scala 63:16]
    when io.bus.response.valid : @[MemCombinPort.scala 69:32]
      when io.pipeline.memwrite : @[MemCombinPort.scala 70:33]
        wire _T_8 : UInt<32> @[MemCombinPort.scala 72:28]
        _T_8 <= io.pipeline.writedata @[MemCombinPort.scala 95:17]
        io.bus.request.bits.writedata <= _T_8 @[MemCombinPort.scala 96:37]
        skip @[MemCombinPort.scala 70:33]
      else : @[MemCombinPort.scala 97:39]
        when io.pipeline.memread : @[MemCombinPort.scala 97:39]
          wire _T_9 : UInt<32> @[MemCombinPort.scala 99:36]
          wire _T_10 : UInt<32> @[MemCombinPort.scala 100:36]
          node _T_11 = bits(io.pipeline.address, 1, 0) @[MemCombinPort.scala 102:39]
          _T_9 <= io.bus.response.bits.data @[MemCombinPort.scala 112:21]
          _T_10 <= _T_9 @[MemCombinPort.scala 127:26]
          io.pipeline.readdata <= _T_10 @[MemCombinPort.scala 128:28]
          skip @[MemCombinPort.scala 97:39]
      skip @[MemCombinPort.scala 69:32]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {success : UInt<1>}
    
    io.success is invalid @[Top.scala 8:14]
    inst cpu of SingleCycleCPU @[Top.scala 10:19]
    cpu.clock <= clock
    cpu.reset <= reset
    inst mem of DualPortedCombinMemory @[Top.scala 11:19]
    mem.clock <= clock
    mem.reset <= reset
    inst imem of ICombinMemPort @[Top.scala 12:20]
    imem.clock <= clock
    imem.reset <= reset
    inst dmem of DCombinMemPort @[Top.scala 13:20]
    dmem.clock <= clock
    dmem.reset <= reset
    mem.io.imem.request.bits.operation <= imem.io.bus.request.bits.operation @[BaseMemComponents.scala 22:26]
    mem.io.imem.request.bits.writedata <= imem.io.bus.request.bits.writedata @[BaseMemComponents.scala 22:26]
    mem.io.imem.request.bits.address <= imem.io.bus.request.bits.address @[BaseMemComponents.scala 22:26]
    mem.io.imem.request.valid <= imem.io.bus.request.valid @[BaseMemComponents.scala 22:26]
    imem.io.bus.request.ready <= mem.io.imem.request.ready @[BaseMemComponents.scala 22:26]
    imem.io.bus.response.bits.data <= mem.io.imem.response.bits.data @[BaseMemComponents.scala 23:26]
    imem.io.bus.response.valid <= mem.io.imem.response.valid @[BaseMemComponents.scala 23:26]
    mem.io.dmem.request.bits.operation <= dmem.io.bus.request.bits.operation @[BaseMemComponents.scala 24:26]
    mem.io.dmem.request.bits.writedata <= dmem.io.bus.request.bits.writedata @[BaseMemComponents.scala 24:26]
    mem.io.dmem.request.bits.address <= dmem.io.bus.request.bits.address @[BaseMemComponents.scala 24:26]
    mem.io.dmem.request.valid <= dmem.io.bus.request.valid @[BaseMemComponents.scala 24:26]
    dmem.io.bus.request.ready <= mem.io.dmem.request.ready @[BaseMemComponents.scala 24:26]
    dmem.io.bus.response.bits.data <= mem.io.dmem.response.bits.data @[BaseMemComponents.scala 25:26]
    dmem.io.bus.response.valid <= mem.io.dmem.response.valid @[BaseMemComponents.scala 25:26]
    cpu.io.imem.instruction <= imem.io.pipeline.instruction @[Top.scala 15:15]
    cpu.io.imem.good <= imem.io.pipeline.good @[Top.scala 15:15]
    imem.io.pipeline.valid <= cpu.io.imem.valid @[Top.scala 15:15]
    imem.io.pipeline.address <= cpu.io.imem.address @[Top.scala 15:15]
    cpu.io.dmem.readdata <= dmem.io.pipeline.readdata @[Top.scala 16:15]
    dmem.io.pipeline.memwrite <= cpu.io.dmem.memwrite @[Top.scala 16:15]
    dmem.io.pipeline.memread <= cpu.io.dmem.memread @[Top.scala 16:15]
    dmem.io.pipeline.writedata <= cpu.io.dmem.writedata @[Top.scala 16:15]
    cpu.io.dmem.good <= dmem.io.pipeline.good @[Top.scala 16:15]
    dmem.io.pipeline.valid <= cpu.io.dmem.valid @[Top.scala 16:15]
    dmem.io.pipeline.address <= cpu.io.dmem.address @[Top.scala 16:15]
    
