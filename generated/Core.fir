;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit Core : 
  module ControlPath : 
    input clock : Clock
    input reset : Reset
    output io : {flip data : {instruction : UInt<32>, alu_branch_take : UInt<1>}, control : {PC_isBranch : UInt<1>, PC_isJump : UInt<1>, DstRegSelect : UInt<1>, WBEnable : UInt<1>, OpBSelect : UInt<1>, AluOp : UInt<4>, MemWriteEnable : UInt<1>, WBSelect : UInt<1>}}
    
    io.control.WBSelect is invalid @[ControlPath.scala 44:8]
    io.control.MemWriteEnable is invalid @[ControlPath.scala 44:8]
    io.control.AluOp is invalid @[ControlPath.scala 44:8]
    io.control.OpBSelect is invalid @[ControlPath.scala 44:8]
    io.control.WBEnable is invalid @[ControlPath.scala 44:8]
    io.control.DstRegSelect is invalid @[ControlPath.scala 44:8]
    io.control.PC_isJump is invalid @[ControlPath.scala 44:8]
    io.control.PC_isBranch is invalid @[ControlPath.scala 44:8]
    io.data.alu_branch_take is invalid @[ControlPath.scala 44:8]
    io.data.instruction is invalid @[ControlPath.scala 44:8]
    node _T = and(io.data.instruction, UInt<32>("h0ffffffff")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<1>("h00"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.data.instruction, UInt<32>("h0fc0007ff")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<6>("h020"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.data.instruction, UInt<32>("h0fc0007ff")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<6>("h022"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.data.instruction, UInt<32>("h0fc0007ff")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<6>("h024"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.data.instruction, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<30>("h020000000"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.data.instruction, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<29>("h010000000"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.data.instruction, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<28>("h08000000"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.data.instruction, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<32>("h08c000000"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.data.instruction, UInt<32>("h0fc000000")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<32>("h0ac000000"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_19 = mux(_T_15, UInt<1>("h00"), _T_18) @[Lookup.scala 33:37]
    node _T_20 = mux(_T_13, UInt<1>("h00"), _T_19) @[Lookup.scala 33:37]
    node _T_21 = mux(_T_11, UInt<1>("h01"), _T_20) @[Lookup.scala 33:37]
    node _T_22 = mux(_T_9, UInt<1>("h00"), _T_21) @[Lookup.scala 33:37]
    node _T_23 = mux(_T_7, UInt<1>("h00"), _T_22) @[Lookup.scala 33:37]
    node _T_24 = mux(_T_5, UInt<1>("h00"), _T_23) @[Lookup.scala 33:37]
    node _T_25 = mux(_T_3, UInt<1>("h00"), _T_24) @[Lookup.scala 33:37]
    node controlSignals_0 = mux(_T_1, UInt<1>("h00"), _T_25) @[Lookup.scala 33:37]
    node _T_26 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_27 = mux(_T_15, UInt<1>("h00"), _T_26) @[Lookup.scala 33:37]
    node _T_28 = mux(_T_13, UInt<1>("h01"), _T_27) @[Lookup.scala 33:37]
    node _T_29 = mux(_T_11, UInt<1>("h00"), _T_28) @[Lookup.scala 33:37]
    node _T_30 = mux(_T_9, UInt<1>("h00"), _T_29) @[Lookup.scala 33:37]
    node _T_31 = mux(_T_7, UInt<1>("h00"), _T_30) @[Lookup.scala 33:37]
    node _T_32 = mux(_T_5, UInt<1>("h00"), _T_31) @[Lookup.scala 33:37]
    node _T_33 = mux(_T_3, UInt<1>("h00"), _T_32) @[Lookup.scala 33:37]
    node controlSignals_1 = mux(_T_1, UInt<1>("h00"), _T_33) @[Lookup.scala 33:37]
    node _T_34 = mux(_T_17, UInt<1>("h01"), UInt<1>("h01")) @[Lookup.scala 33:37]
    node _T_35 = mux(_T_15, UInt<1>("h00"), _T_34) @[Lookup.scala 33:37]
    node _T_36 = mux(_T_13, UInt<1>("h01"), _T_35) @[Lookup.scala 33:37]
    node _T_37 = mux(_T_11, UInt<1>("h01"), _T_36) @[Lookup.scala 33:37]
    node _T_38 = mux(_T_9, UInt<1>("h00"), _T_37) @[Lookup.scala 33:37]
    node _T_39 = mux(_T_7, UInt<1>("h01"), _T_38) @[Lookup.scala 33:37]
    node _T_40 = mux(_T_5, UInt<1>("h01"), _T_39) @[Lookup.scala 33:37]
    node _T_41 = mux(_T_3, UInt<1>("h01"), _T_40) @[Lookup.scala 33:37]
    node controlSignals_2 = mux(_T_1, UInt<1>("h01"), _T_41) @[Lookup.scala 33:37]
    node _T_42 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_43 = mux(_T_15, UInt<1>("h01"), _T_42) @[Lookup.scala 33:37]
    node _T_44 = mux(_T_13, UInt<1>("h00"), _T_43) @[Lookup.scala 33:37]
    node _T_45 = mux(_T_11, UInt<1>("h00"), _T_44) @[Lookup.scala 33:37]
    node _T_46 = mux(_T_9, UInt<1>("h01"), _T_45) @[Lookup.scala 33:37]
    node _T_47 = mux(_T_7, UInt<1>("h01"), _T_46) @[Lookup.scala 33:37]
    node _T_48 = mux(_T_5, UInt<1>("h01"), _T_47) @[Lookup.scala 33:37]
    node _T_49 = mux(_T_3, UInt<1>("h01"), _T_48) @[Lookup.scala 33:37]
    node controlSignals_3 = mux(_T_1, UInt<1>("h00"), _T_49) @[Lookup.scala 33:37]
    node _T_50 = mux(_T_17, UInt<1>("h01"), UInt<1>("h01")) @[Lookup.scala 33:37]
    node _T_51 = mux(_T_15, UInt<1>("h00"), _T_50) @[Lookup.scala 33:37]
    node _T_52 = mux(_T_13, UInt<1>("h01"), _T_51) @[Lookup.scala 33:37]
    node _T_53 = mux(_T_11, UInt<1>("h01"), _T_52) @[Lookup.scala 33:37]
    node _T_54 = mux(_T_9, UInt<1>("h00"), _T_53) @[Lookup.scala 33:37]
    node _T_55 = mux(_T_7, UInt<1>("h01"), _T_54) @[Lookup.scala 33:37]
    node _T_56 = mux(_T_5, UInt<1>("h01"), _T_55) @[Lookup.scala 33:37]
    node _T_57 = mux(_T_3, UInt<1>("h01"), _T_56) @[Lookup.scala 33:37]
    node controlSignals_4 = mux(_T_1, UInt<1>("h01"), _T_57) @[Lookup.scala 33:37]
    node _T_58 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_59 = mux(_T_15, UInt<1>("h01"), _T_58) @[Lookup.scala 33:37]
    node _T_60 = mux(_T_13, UInt<1>("h00"), _T_59) @[Lookup.scala 33:37]
    node _T_61 = mux(_T_11, UInt<3>("h04"), _T_60) @[Lookup.scala 33:37]
    node _T_62 = mux(_T_9, UInt<1>("h01"), _T_61) @[Lookup.scala 33:37]
    node _T_63 = mux(_T_7, UInt<2>("h03"), _T_62) @[Lookup.scala 33:37]
    node _T_64 = mux(_T_5, UInt<2>("h02"), _T_63) @[Lookup.scala 33:37]
    node _T_65 = mux(_T_3, UInt<1>("h01"), _T_64) @[Lookup.scala 33:37]
    node controlSignals_5 = mux(_T_1, UInt<1>("h00"), _T_65) @[Lookup.scala 33:37]
    node _T_66 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_67 = mux(_T_15, UInt<1>("h00"), _T_66) @[Lookup.scala 33:37]
    node _T_68 = mux(_T_13, UInt<1>("h00"), _T_67) @[Lookup.scala 33:37]
    node _T_69 = mux(_T_11, UInt<1>("h00"), _T_68) @[Lookup.scala 33:37]
    node _T_70 = mux(_T_9, UInt<1>("h00"), _T_69) @[Lookup.scala 33:37]
    node _T_71 = mux(_T_7, UInt<1>("h00"), _T_70) @[Lookup.scala 33:37]
    node _T_72 = mux(_T_5, UInt<1>("h00"), _T_71) @[Lookup.scala 33:37]
    node _T_73 = mux(_T_3, UInt<1>("h00"), _T_72) @[Lookup.scala 33:37]
    node controlSignals_6 = mux(_T_1, UInt<1>("h00"), _T_73) @[Lookup.scala 33:37]
    node _T_74 = mux(_T_17, UInt<1>("h01"), UInt<1>("h01")) @[Lookup.scala 33:37]
    node _T_75 = mux(_T_15, UInt<1>("h00"), _T_74) @[Lookup.scala 33:37]
    node _T_76 = mux(_T_13, UInt<1>("h01"), _T_75) @[Lookup.scala 33:37]
    node _T_77 = mux(_T_11, UInt<1>("h01"), _T_76) @[Lookup.scala 33:37]
    node _T_78 = mux(_T_9, UInt<1>("h01"), _T_77) @[Lookup.scala 33:37]
    node _T_79 = mux(_T_7, UInt<1>("h01"), _T_78) @[Lookup.scala 33:37]
    node _T_80 = mux(_T_5, UInt<1>("h01"), _T_79) @[Lookup.scala 33:37]
    node _T_81 = mux(_T_3, UInt<1>("h01"), _T_80) @[Lookup.scala 33:37]
    node controlSignals_7 = mux(_T_1, UInt<1>("h01"), _T_81) @[Lookup.scala 33:37]
    node _T_82 = and(controlSignals_0, io.data.alu_branch_take) @[ControlPath.scala 72:51]
    node control_PC_isBranch = mux(_T_82, UInt<1>("h01"), UInt<1>("h00")) @[ControlPath.scala 72:34]
    io.control.PC_isJump <= controlSignals_1 @[ControlPath.scala 74:26]
    io.control.PC_isBranch <= control_PC_isBranch @[ControlPath.scala 75:28]
    io.control.DstRegSelect <= controlSignals_2 @[ControlPath.scala 76:29]
    io.control.WBEnable <= controlSignals_3 @[ControlPath.scala 77:25]
    io.control.OpBSelect <= controlSignals_4 @[ControlPath.scala 78:26]
    io.control.AluOp <= controlSignals_5 @[ControlPath.scala 79:22]
    io.control.MemWriteEnable <= controlSignals_6 @[ControlPath.scala 80:31]
    io.control.WBSelect <= controlSignals_7 @[ControlPath.scala 81:25]
    
  module InstrMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, readData : UInt<32>}
    
    smem mem : UInt<32>[1024] @[Memory.scala 23:26]
    wire _T : UInt @[Memory.scala 24:28]
    _T is invalid @[Memory.scala 24:28]
    when UInt<1>("h01") : @[Memory.scala 24:28]
      _T <= io.addr @[Memory.scala 24:28]
      node _T_1 = or(_T, UInt<10>("h00")) @[Memory.scala 24:28]
      node _T_2 = bits(_T_1, 9, 0) @[Memory.scala 24:28]
      read mport _T_3 = mem[_T_2], clock @[Memory.scala 24:28]
      skip @[Memory.scala 24:28]
    io.readData <= _T_3 @[Memory.scala 24:17]
    
  module DataMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip isWrite : UInt<1>, flip addr : UInt<32>, flip writeData : UInt<32>, readData : UInt<32>}
    
    smem mem : UInt<32>[1024] @[Memory.scala 46:26]
    when io.isWrite : @[Memory.scala 47:23]
      node _T = bits(io.addr, 9, 0)
      write mport _T_1 = mem[_T], clock
      _T_1 <= io.writeData
      io.readData is invalid @[Memory.scala 49:19]
      skip @[Memory.scala 47:23]
    else : @[Memory.scala 50:17]
      wire _T_2 : UInt @[Memory.scala 52:30]
      _T_2 is invalid @[Memory.scala 52:30]
      when UInt<1>("h01") : @[Memory.scala 52:30]
        _T_2 <= io.addr @[Memory.scala 52:30]
        node _T_3 = or(_T_2, UInt<10>("h00")) @[Memory.scala 52:30]
        node _T_4 = bits(_T_3, 9, 0) @[Memory.scala 52:30]
        read mport _T_5 = mem[_T_4], clock @[Memory.scala 52:30]
        skip @[Memory.scala 52:30]
      io.readData <= _T_5 @[Memory.scala 52:19]
      skip @[Memory.scala 50:17]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1Addr : UInt<5>, rs1Data : UInt<32>, flip rs2Addr : UInt<5>, rs2Data : UInt<32>, flip writeAddr : UInt<5>, flip writeData : UInt<32>, flip writeEnable : UInt<1>}
    
    cmem registerFile : UInt<32>[32] @[RegisterFile.scala 39:27]
    node _T = neq(io.writeAddr, UInt<1>("h00")) @[RegisterFile.scala 41:43]
    node _T_1 = and(io.writeEnable, _T) @[RegisterFile.scala 41:26]
    when _T_1 : @[RegisterFile.scala 42:5]
      infer mport _T_2 = registerFile[io.writeAddr], clock @[RegisterFile.scala 43:19]
      _T_2 <= io.writeData @[RegisterFile.scala 43:34]
      skip @[RegisterFile.scala 42:5]
    node _T_3 = neq(io.rs1Addr, UInt<1>("h00")) @[RegisterFile.scala 46:35]
    infer mport _T_4 = registerFile[io.rs1Addr], clock @[RegisterFile.scala 46:57]
    node _T_5 = mux(_T_3, _T_4, UInt<1>("h00")) @[RegisterFile.scala 46:22]
    io.rs1Data <= _T_5 @[RegisterFile.scala 46:16]
    node _T_6 = neq(io.rs2Addr, UInt<1>("h00")) @[RegisterFile.scala 47:35]
    infer mport _T_7 = registerFile[io.rs2Addr], clock @[RegisterFile.scala 47:57]
    node _T_8 = mux(_T_6, _T_7, UInt<1>("h00")) @[RegisterFile.scala 47:22]
    io.rs2Data <= _T_8 @[RegisterFile.scala 47:16]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {input : {flip inputA : UInt<32>, flip inputB : UInt<32>, flip controlSignal : UInt<4>}, output : {aluOutput : UInt<32>, branchTake : UInt<1>}}
    
    node _T = add(io.input.inputA, io.input.inputB) @[ALU.scala 41:31]
    node _T_1 = tail(_T, 1) @[ALU.scala 41:31]
    node _T_2 = sub(io.input.inputA, io.input.inputB) @[ALU.scala 42:31]
    node _T_3 = tail(_T_2, 1) @[ALU.scala 42:31]
    node _T_4 = and(io.input.inputA, io.input.inputB) @[ALU.scala 43:31]
    node _T_5 = eq(UInt<4>("h09"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_7 : UInt<32> @[Mux.scala 68:16]
    _T_7 is invalid @[Mux.scala 68:16]
    node _T_6 = mux(_T_5, _T_7, io.input.inputA) @[Mux.scala 68:16]
    node _T_8 = eq(UInt<4>("h08"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_10 : UInt<32> @[Mux.scala 68:16]
    _T_10 is invalid @[Mux.scala 68:16]
    node _T_9 = mux(_T_8, _T_10, _T_6) @[Mux.scala 68:16]
    node _T_11 = eq(UInt<4>("h07"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_13 : UInt<32> @[Mux.scala 68:16]
    _T_13 is invalid @[Mux.scala 68:16]
    node _T_12 = mux(_T_11, _T_13, _T_9) @[Mux.scala 68:16]
    node _T_14 = eq(UInt<4>("h06"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_16 : UInt<32> @[Mux.scala 68:16]
    _T_16 is invalid @[Mux.scala 68:16]
    node _T_15 = mux(_T_14, _T_16, _T_12) @[Mux.scala 68:16]
    node _T_17 = eq(UInt<4>("h05"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_19 : UInt<32> @[Mux.scala 68:16]
    _T_19 is invalid @[Mux.scala 68:16]
    node _T_18 = mux(_T_17, _T_19, _T_15) @[Mux.scala 68:16]
    node _T_20 = eq(UInt<4>("h04"), io.input.controlSignal) @[Mux.scala 68:19]
    wire _T_22 : UInt<32> @[Mux.scala 68:16]
    _T_22 is invalid @[Mux.scala 68:16]
    node _T_21 = mux(_T_20, _T_22, _T_18) @[Mux.scala 68:16]
    node _T_23 = eq(UInt<4>("h03"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_24 = mux(_T_23, _T_4, _T_21) @[Mux.scala 68:16]
    node _T_25 = eq(UInt<4>("h02"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_26 = mux(_T_25, _T_3, _T_24) @[Mux.scala 68:16]
    node _T_27 = eq(UInt<4>("h01"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_28 = mux(_T_27, _T_1, _T_26) @[Mux.scala 68:16]
    io.output.aluOutput <= _T_28 @[ALU.scala 40:25]
    node _T_29 = eq(io.input.inputA, io.input.inputB) @[ALU.scala 53:41]
    node _T_30 = eq(io.input.inputA, io.input.inputB) @[ALU.scala 54:43]
    node _T_31 = eq(_T_30, UInt<1>("h00")) @[ALU.scala 54:25]
    node _T_32 = gt(io.input.inputA, UInt<1>("h00")) @[ALU.scala 55:47]
    node _T_33 = geq(io.input.inputA, UInt<1>("h00")) @[ALU.scala 56:52]
    node _T_34 = geq(io.input.inputA, UInt<1>("h00")) @[ALU.scala 57:45]
    node _T_35 = eq(_T_34, UInt<1>("h00")) @[ALU.scala 57:27]
    node _T_36 = gt(io.input.inputA, UInt<1>("h00")) @[ALU.scala 58:50]
    node _T_37 = eq(_T_36, UInt<1>("h00")) @[ALU.scala 58:32]
    node _T_38 = eq(UInt<4>("h09"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_39 = mux(_T_38, _T_37, UInt<1>("h00")) @[Mux.scala 68:16]
    node _T_40 = eq(UInt<4>("h08"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_41 = mux(_T_40, _T_35, _T_39) @[Mux.scala 68:16]
    node _T_42 = eq(UInt<4>("h07"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_43 = mux(_T_42, _T_33, _T_41) @[Mux.scala 68:16]
    node _T_44 = eq(UInt<4>("h06"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_45 = mux(_T_44, _T_32, _T_43) @[Mux.scala 68:16]
    node _T_46 = eq(UInt<4>("h05"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_47 = mux(_T_46, _T_31, _T_45) @[Mux.scala 68:16]
    node _T_48 = eq(UInt<4>("h04"), io.input.controlSignal) @[Mux.scala 68:19]
    node _T_49 = mux(_T_48, _T_29, _T_47) @[Mux.scala 68:16]
    io.output.branchTake <= _T_49 @[ALU.scala 52:26]
    
  module DataPath : 
    input clock : Clock
    input reset : Reset
    output io : {flip control : {PC_isBranch : UInt<1>, PC_isJump : UInt<1>, DstRegSelect : UInt<1>, WBEnable : UInt<1>, OpBSelect : UInt<1>, AluOp : UInt<4>, MemWriteEnable : UInt<1>, WBSelect : UInt<1>}, data : {instruction : UInt<32>, alu_branch_take : UInt<1>}}
    
    inst instrMem of InstrMem @[DataPath.scala 53:26]
    instrMem.clock <= clock
    instrMem.reset <= reset
    inst dataMem of DataMem @[DataPath.scala 54:25]
    dataMem.clock <= clock
    dataMem.reset <= reset
    io.data.alu_branch_take is invalid @[DataPath.scala 57:8]
    io.data.instruction is invalid @[DataPath.scala 57:8]
    io.control.WBSelect is invalid @[DataPath.scala 57:8]
    io.control.MemWriteEnable is invalid @[DataPath.scala 57:8]
    io.control.AluOp is invalid @[DataPath.scala 57:8]
    io.control.OpBSelect is invalid @[DataPath.scala 57:8]
    io.control.WBEnable is invalid @[DataPath.scala 57:8]
    io.control.DstRegSelect is invalid @[DataPath.scala 57:8]
    io.control.PC_isJump is invalid @[DataPath.scala 57:8]
    io.control.PC_isBranch is invalid @[DataPath.scala 57:8]
    wire pc_next : UInt<32> @[DataPath.scala 60:23]
    wire pc_plus4 : UInt<32> @[DataPath.scala 61:24]
    wire br_target : UInt<32> @[DataPath.scala 62:25]
    wire j_target : UInt<32> @[DataPath.scala 63:24]
    node _T = eq(io.control.PC_isBranch, UInt<1>("h01")) @[DataPath.scala 67:32]
    node _T_1 = eq(io.control.PC_isJump, UInt<1>("h01")) @[DataPath.scala 68:29]
    node _T_2 = mux(_T_1, j_target, pc_plus4) @[Mux.scala 87:16]
    node _T_3 = mux(_T, br_target, _T_2) @[Mux.scala 87:16]
    pc_next <= _T_3 @[DataPath.scala 66:13]
    reg reg_PC : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[DataPath.scala 72:25]
    node _T_4 = add(reg_PC, UInt<3>("h04")) @[DataPath.scala 75:24]
    node _T_5 = tail(_T_4, 1) @[DataPath.scala 75:24]
    pc_plus4 <= _T_5 @[DataPath.scala 75:14]
    instrMem.io.addr <= reg_PC @[DataPath.scala 78:22]
    node rs_address = bits(instrMem.io.readData, 25, 21) @[DataPath.scala 85:33]
    node rt_address = bits(instrMem.io.readData, 20, 16) @[DataPath.scala 86:33]
    node rd_address = bits(instrMem.io.readData, 15, 11) @[DataPath.scala 87:33]
    node shamt = bits(instrMem.io.readData, 10, 6) @[DataPath.scala 88:28]
    node immediate = bits(instrMem.io.readData, 15, 0) @[DataPath.scala 89:32]
    node address = bits(instrMem.io.readData, 25, 0) @[DataPath.scala 90:30]
    node _T_6 = bits(immediate, 15, 15) @[DataPath.scala 93:50]
    node _T_7 = bits(_T_6, 0, 0) @[Bitwise.scala 71:15]
    node _T_8 = mux(_T_7, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 71:12]
    node extendedImmediate = cat(_T_8, immediate) @[Cat.scala 29:58]
    node _T_9 = bits(reg_PC, 31, 28) @[DataPath.scala 95:27]
    node _T_10 = mux(UInt<1>("h00"), UInt<2>("h03"), UInt<2>("h00")) @[Bitwise.scala 71:12]
    node _T_11 = cat(_T_9, address) @[Cat.scala 29:58]
    node _T_12 = cat(_T_11, _T_10) @[Cat.scala 29:58]
    j_target <= _T_12 @[DataPath.scala 95:14]
    node _T_13 = add(extendedImmediate, pc_plus4) @[DataPath.scala 96:36]
    node _T_14 = tail(_T_13, 1) @[DataPath.scala 96:36]
    br_target <= _T_14 @[DataPath.scala 96:15]
    wire wb_data : UInt<32> @[DataPath.scala 98:23]
    inst regFile of RegisterFile @[DataPath.scala 100:25]
    regFile.clock <= clock
    regFile.reset <= reset
    regFile.io.rs1Addr <= rs_address @[DataPath.scala 101:24]
    regFile.io.rs2Addr <= rt_address @[DataPath.scala 102:24]
    node _T_15 = mux(io.control.DstRegSelect, rt_address, rd_address) @[DataPath.scala 103:32]
    regFile.io.writeAddr <= _T_15 @[DataPath.scala 103:26]
    regFile.io.writeData <= wb_data @[DataPath.scala 104:26]
    regFile.io.writeEnable <= io.control.WBEnable @[DataPath.scala 105:28]
    wire valRS : UInt<32> @[DataPath.scala 108:21]
    wire valRT : UInt<32> @[DataPath.scala 109:21]
    valRS <= regFile.io.rs1Data @[DataPath.scala 111:11]
    valRT <= regFile.io.rs2Data @[DataPath.scala 112:11]
    inst alu of ALU @[DataPath.scala 114:21]
    alu.clock <= clock
    alu.reset <= reset
    alu.io.input.inputA <= valRS @[DataPath.scala 115:25]
    node _T_16 = mux(io.control.OpBSelect, valRT, extendedImmediate) @[DataPath.scala 117:31]
    alu.io.input.inputB <= _T_16 @[DataPath.scala 117:25]
    alu.io.input.controlSignal <= io.control.AluOp @[DataPath.scala 118:32]
    wire isBranchTaken : UInt<1> @[DataPath.scala 120:29]
    wire aluOutput : UInt<32> @[DataPath.scala 121:25]
    isBranchTaken <= alu.io.output.branchTake @[DataPath.scala 123:19]
    aluOutput <= alu.io.output.aluOutput @[DataPath.scala 124:15]
    dataMem.io.addr <= aluOutput @[DataPath.scala 129:21]
    dataMem.io.writeData <= valRT @[DataPath.scala 130:26]
    dataMem.io.isWrite <= io.control.MemWriteEnable @[DataPath.scala 131:24]
    wire readData : UInt<32> @[DataPath.scala 134:24]
    readData <= dataMem.io.readData @[DataPath.scala 135:14]
    node _T_17 = mux(io.control.WBSelect, aluOutput, readData) @[DataPath.scala 137:19]
    wb_data <= _T_17 @[DataPath.scala 137:13]
    reg_PC <= pc_next @[DataPath.scala 140:12]
    io.data.alu_branch_take <= isBranchTaken @[DataPath.scala 142:29]
    io.data.instruction <= instrMem.io.readData @[DataPath.scala 143:25]
    
  module Core : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : {pc_out : UInt<32>}}
    
    inst control of ControlPath @[Core.scala 14:25]
    control.clock <= clock
    control.reset <= reset
    inst data of DataPath @[Core.scala 15:22]
    data.clock <= clock
    data.reset <= reset
    data.io.control.WBSelect <= control.io.control.WBSelect @[Core.scala 17:24]
    data.io.control.MemWriteEnable <= control.io.control.MemWriteEnable @[Core.scala 17:24]
    data.io.control.AluOp <= control.io.control.AluOp @[Core.scala 17:24]
    data.io.control.OpBSelect <= control.io.control.OpBSelect @[Core.scala 17:24]
    data.io.control.WBEnable <= control.io.control.WBEnable @[Core.scala 17:24]
    data.io.control.DstRegSelect <= control.io.control.DstRegSelect @[Core.scala 17:24]
    data.io.control.PC_isJump <= control.io.control.PC_isJump @[Core.scala 17:24]
    data.io.control.PC_isBranch <= control.io.control.PC_isBranch @[Core.scala 17:24]
    control.io.data.alu_branch_take <= data.io.data.alu_branch_take @[Core.scala 18:21]
    control.io.data.instruction <= data.io.data.instruction @[Core.scala 18:21]
    io.out.pc_out <= data.io.data.instruction @[Core.scala 19:19]
    
